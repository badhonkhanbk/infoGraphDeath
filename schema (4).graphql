type Query {
  getAllTheIngredients(filter: StructureIngredientsData!): RetrurnIngredients!
  getALlUniqueNutrientList: [UniqueNutrient!]!
  getASingleIngredient(ingredientId: String!): Ingredient!
  getAUniqueNutrient(nutrientId: String!): UniqueNutrient!
  storeAllUniqueNutrient: String!
  databaseShifting: String!
  SearchIngredients(searchTerm: String!): [Ingredient!]!
  getIngredientInfoBasedOnDefaultPortion(
    ingredientId: String!
  ): ReturnIngredientBasedOnDefaultPortion!
  getNutritionBasedOnRecipe(
    ingredientsInfo: [IngredientInfo!]!
  ): [NutrientValue!]!
  getCompareList(userId: String!): [Recipe!]!
  getAllRecipesByBlendCategory(data: GetAllRecipeByBlendCategory!): [Recipe!]!
  getAllRecipes(userId: String): [Recipe!]!
  getAllrecomendedRecipes(userId: String!): [Recipe!]!
  getAllpopularRecipes(userId: String!): [Recipe!]!
  searchRecipes(userId: String!, searchTerm: String!): [Recipe!]!
  getAllLatestRecipes(userId: String!): [Recipe!]!
  getARecipe(token: String, userId: String, recipeId: String!): Recipe!
  getARecipeForAdmin(recipeId: String!): SimpleRecipe!
  getAllRecipesBasedOnIngredient(ingredientId: String!): [Recipe!]!
  getAllMyCreatedRecipes(userId: String!): [Recipe!]!
  populateAllRecipeFacts: String!
  populateAllOriginalRecipeFacts: String!
  filterRecipe(data: FilterRecipe!): [Recipe!]!
  getAllCategories: [RecipeCategory!]!
  getASingleCategory(recipeCategoryName: String!): RecipeCategory!
  getAllBrands: [Brand!]!
  getASingleBrand(brandId: String!): Brand!
  getASingleAdmin(adminId: String!): Admin!
  getAllAdmin: [PopulatedAdmin!]!
  getASingleRole(roleId: String!): String!
  getAllRoles: [Role!]!
  getUserCollectionsAndThemes(userId: String!): CollectionsAndTheme!
  getASingleCollection(userId: String!, slug: String!): CollectionType!
  getASingleUserByEmail(email: String!): Member!
  getASingleUserById(id: String!): Member!
  getAllusers: [Member!]!
  getAllusersForClient: [Member!]!
  getSingleUSerById(userId: String!): Member!
  getASingleCofiguiration(configuirationId: String!): Configuiration!
  getAllConfiguirations: [Configuiration!]!
  checkConfiguiration: [String!]!
  checkForRecipeExistenceInCollection(data: AddExistingRecipeInput!): Boolean!
  getLastModifieldCollection(userEmail: String!): CollectionType!
  getAllRecipesFromCollection(userId: String!): [Recipe!]!
  getAllCommentsForARecipe(data: GetAllComments!): RecipeComments!
  getAllAdminCollection(collectionType: String!): [AdminCollection!]!
  getSimpleAdminCollections: [SimpleAdminCollection!]!
  getAllAdminCollectionType: [String!]!
  emptyCollections(collectionType: String!): String!
  getMyNotesForARecipe(data: GetMyNote!): [UserNote!]!
  getAllMyNotes(userId: String!): [UserNote!]!
  getAllBlendNutrientCategories: [BlendNutrientCategory!]!
  getASingleBlendNutrientCategory(id: String!): BlendNutrientCategory!
  getAllBlendNutrients: [BlendNutrientData!]!
  getASingleBlendNutrient(id: String!): BlendNutrientData!
  getBlendNutrientsBasedOnCategoey(
    nutrientCategoryId: String!
  ): [BlendNutrientData!]!
  getAllBlendIngredients: [ReturnBlendIngredientData!]!
  getAllClassOneIngredients: [ReturnBlendIngredientData!]!
  getBlendIngredientById(id: String!): BlendIngredientData!
  filterIngredientByCategoryAndClass(
    data: IngredientFilter!
  ): [BlendIngredientData!]!
  getBlendIngredientInfoBasedOnDefaultPortion(
    ingredientId: String!
  ): ReturnBlendIngredientBasedOnDefaultPortion!
  searchBlendIngredients(searchTerm: String!): [BlendIngredientData!]!
  getBlendNutritionBasedOnRecipeData(
    isVersion: Boolean!
    recipeId: String!
  ): String!
  getNutrientsListAndGiGlByIngredients(
    ingredientsInfo: [BlendIngredientInfo!]!
  ): NutrientsWithGiGl!
  getBlendNutritionBasedOnRecipexxx(
    ingredientsInfo: [BlendIngredientInfo!]!
  ): String!
  getAllIngredientsDataBasedOnNutrition(
    data: GetIngredientsFromNutrition!
  ): [IngredientForWiki!]!
  getGlAndNetCarbs(versionId: String!): GiGl!
  getGlAndNetCarbs2(ingredientsInfo: [BlendIngredientInfo!]!): GiGl!
  getBlendNutritionBasedOnRecipexxx2(
    ingredientsInfo: [BlendIngredientInfo!]!
  ): String!
  getNutrientWikiList(
    ids: [String!]
    page: Float
    limit: Float
    userId: String
  ): WikiListWithPagination!
  getNutrientWikiList2(
    ids: [String!]
    page: Float
    limit: Float
    userId: String
  ): WikiListWithPagination!
  getIngredientWikiList(
    ids: [String!]
    page: Float
    limit: Float
    userId: String
  ): WikiListWithPagination!
  getIngredientWikiList2(
    ids: [String!]
    page: Float
    limit: Float
    userId: String
  ): WikiListWithPagination!
  getWikiList(userId: String): [wikiList!]!
  getWikiList2(userId: String): [wikiList!]!
  getBlendNutritionBasedIngredientsWiki(
    userId: String
    ingredientsInfo: [BlendIngredientInfo!]!
  ): NutritionFromIngredient!
  getBlendNutritionBasedIngredientsWiki2(
    userId: String
    ingredientsInfo: [BlendIngredientInfo!]!
  ): NutritionFromIngredient!
  getAllIngredientsBasedOnNutrition(
    userId: String
    data: GetIngredientsFromNutrition!
  ): IngredientFromNutrition!
  getAllIngredientsBasedOnNutrition2(
    userId: String
    data: GetIngredientsFromNutrition!
  ): IngredientFromNutrition!
  convertToGram(data: GramConversion!): Float!
  convertGramToUnit(data: GramConversion!): Float!
  getDefaultPortion(ingredientId: String!): Float!
  bodyTeswwt: String!
  getWikiLinks(links: Boolean, type: String!, entityId: String!): WikiLinks!
  getData: String!
  getAllDailys: [PopulatedDaily!]!
  getASingleDaily(dailyId: String!): DailyWithRanges!
  getRangesForADaily(dailyId: String!): [RangeType!]!
  getASingleRange(rangeId: String!, dailyId: String!): RangeType!
  getDailyByUserId(userId: String!): GetDaily!
  bmiCalculation(heightInCM: Float!, weightInKG: Float!): Float!
  getDailyCalorie(
    heightInCM: Float!
    weightInKG: Float!
    gender: String!
    bmi: Float!
    ageInYears: Float!
    activity: String!
  ): Float!
  getShowPercentageDaily: String!
  getDailyGoals(memberId: String!): ReturnDailyGoal!
  getAllWidgets: [WidgetType!]!
  getAllWidgetCollection(widgetId: String!): [WidgetCollecType!]!
  getASingleWidget(widgetId: String!): WidgetType!
  getASingleWidgetCollection(
    widgetCollectionId: String!
    widgetId: String!
  ): WidgetCollecType!
  getWidgetTypeBySlug(slug: String!): String!
  getWidgetsForClient(slug: String!): WidgetForClient!
  getWidgetCollectionbySlugForClient(
    slug: String!
    widgetSlug: String!
  ): WidgetCollectionForClient!
  qsq12: String!
  getASingleTheme(themeId: String!): Theme!
  getAllThemes: [Theme!]!
  getARecipeVersion(versionId: String!): RecipeVersion!
  getAllVersions(userId: String!, recipeId: String!): RecipeWithVersion!
  getMyGroceryList(memberId: String!): [Grocery!]!
  searchBlendIngredientsForGrocery(
    memberId: String!
    searchTerm: String!
  ): [GroceryIngredientType!]!
  getMyIngredientList(memberId: String!): [String!]!
  getPantryList(memberId: String!): [Grocery!]!
  getStapleList(memberId: String!): [Grocery!]!
  getPlannerByDates(
    userId: String!
    endDate: String!
    startDate: String!
  ): PlannersIngredientAndCategory!
  getAllPlannersByUserId(userId: String!): [PlannerWithRecipes!]!
  getAllRecipesForPlanner(
    recipeBlendCategory: String
    searchTerm: String!
    page: Float!
    limit: Float!
    userId: String!
  ): PlannerRecipe!
  getQuedPlanner(
    currentDate: String!
    recipeBlendCategory: String
    searchTerm: String!
    page: Float!
    limit: Float!
    userId: String!
  ): PlannerRecipe!
  getIngredientsFromARecipe(recipeId: String!): [IngredientData!]!
  getInviteChallengeInfo(inviteId: String!): inviteInfo!
  upgradeTopIngredient(challengeId: String!): String!
  getAllChallengePostByDate(
    memberId: String!
    date: DateTime!
  ): [ChallengePost!]!
  getLastSevenDaysChallenge(
    startDate: String
    memberId: String!
  ): ChallengeAndChallengeDocs!
  getMyThirtyDaysChallenge(
    challengeId: String
    token: String
    startDate: String
    memberId: String!
  ): ChallengeAndChallengeDocs!
  getChallengeGallery(memberId: String!): [ChallengePost!]!
  getAChallengeGallery(memberId: String!): [GalleryImage!]!
  getLatestChallengePost(memberId: String!): Challenge!
  getChallengePosts(
    page: Float!
    limit: Float!
    memberId: String!
  ): ChallengePostWithCount!
  getIngredientsStats(currentDate: String!): String!
  testGetIngredientsStats(
    type: String
    ingredientId: String!
    memberId: String!
    currentDate: String!
  ): IngredientStatsWithPortion!
  testGetNuteientsStats(
    type: String
    nutrientId: String!
    memberId: String!
    currentDate: String!
  ): BlendNutrientStats!
  getMyChallengeList(memberId: String!): [UserChallenge!]!
  getChallengeInfoById(
    token: String!
    challengeId: String!
  ): ChallengeInfoForId!
  getChallengeById(challengeId: String!): UserChallenge!
  getAllWikiCommentsForAWikiEntity(
    userId: String!
    entityId: String!
  ): [PopulatedWikiComment!]!
  getWikiCompareList(userId: String!): [CompareBlendIngredientData!]!
  getAllThemeChannels: [ThemeChannel!]!
  getASingleBanner(bannerId: String!): Banner!
  getAllBanners: [Banner!]!
  getBannerCount: String!
  getAgeneralBlog(currentDate: String!, blogId: ID!): GeneralBlog!
  getAgeneralBlogBySlug(slug: String!): GeneralBlog!
  getAllGeneralBlog(currentDate: String!): [GeneralBlog!]!
  getAllGeneralBlogForClient(currentDate: String!): [GeneralBlog!]!
  getAllCommentsForABlog(blogId: String!): [BlogComment!]!
  getMyPlans(memberId: String!): [Plan!]!
  getAPlan(planId: String!): PlanIngredientAndCategory!
  getAllGlobalPlans(limit: Float!, page: Float!): PlansWithTotal!
  getAllRecentPlans(limit: Float!): [Plan!]!
  getAllRecommendedPlans(limit: Float!): [Plan!]!
  getAllPopularPlans(limit: Float!): [Plan!]!
  getAllBlogCollections(memberId: String!): [BlogCollection!]!
  getAllCommentsForAPlan(planId: String!): [PlanComment!]!
}

type RetrurnIngredients {
  ingredients: [RetrurnIngredient!]!
  totalIngredientsCount: Float!
}

type RetrurnIngredient {
  _id: ID!
  ingredientId: String
  ingredientName: String
  category: String
  blendStatus: String
  classType: String
  nutrients: [NutrientValue!]
  portions: [Portion!]
  source: String
  description: String
  sourceId: String
  sourceCategory: String
  publication_date: String
  featuredImage: String
  images: [String!]
  nutrientCount: Float
  portionCount: Float
  collections: [ID!]
  addedToBlend: Boolean
  totalIngredients: Float
}

type NutrientValue {
  blendData: BlendNutrientData
  value: String!
  sourceId: String!
  uniqueNutrientRefference: UniqueNutrient!
}

type BlendNutrientData {
  _id: ID!
  blendId: String
  nutrientName: String
  altName: String
  status: String!
  category: BlendNutrientCategory
  parent: BlendNutrientData
  parentIsCategory: Boolean
  rank: Float
  min_measure: String
  unitName: String
  units: String
  related_sources: [BlendRelatedSource!]
  mapList: [map!]
  showChildren: Boolean
  usePriorityForMap: Boolean
  isBookmarked: Boolean
}

type BlendNutrientCategory {
  _id: ID!
  blendId: String!
  categoryName: String!
  slug: String
  nutrientDescription: String!
  images: [String!]
  featuredImage: String
  keywords: [String!]
  isPublished: Boolean!
  rank: Float!
}

type BlendRelatedSource {
  source: String
  sourceId: ID
  sourceNutrientName: String
  units: String
}

type map {
  srcUniqueNutrientId: ID
  nutrientName: String
  rank: Float
}

type UniqueNutrient {
  _id: ID
  nutrient: String
  category: String
  nutrientId: String
  unitName: String
  min: String
  max: String
  rank: Float
  publication_date: String
  units: String
  parentNutrient: UniqueNutrient
  related_sources: [RelatedSource!]
  mapTo: ID
}

type RelatedSource {
  source: String
  sourceId: String
  sourceNutrientName: String
  units: String
}

type Portion {
  measurement: String!
  measurement2: String
  meausermentWeight: String!
  default: Boolean!
  sourceId: String
  _id: String
}

input StructureIngredientsData {
  rowsPerPage: Float
  page: Float
  sort: String
  search: String
}

type Ingredient {
  _id: ID!
  ingredientId: String
  ingredientName: String
  category: String
  blendStatus: String
  classType: String
  nutrients: [NutrientValue!]
  portions: [Portion!]
  source: String
  description: String
  sourceId: String
  sourceCategory: String
  publication_date: String
  featuredImage: String
  images: [String!]
  collections: [ID!]
  addedToBlend: Boolean
}

type ReturnIngredientBasedOnDefaultPortion {
  _id: ID!
  ingredientId: String
  ingredientName: String
  category: String
  blendStatus: String
  classType: String
  defaultPortionNutrients: [DefaultPortionNutrient!]
  portions: [Portion!]
  source: String
  description: String
  sourceId: String
  sourceCategory: String
  publication_date: String
  featuredImage: String
  images: [String!]
  collections: [ID!]
}

type DefaultPortionNutrient {
  value: String!
  uniqueNutrientRefference: UniqueNutrient!
}

input IngredientInfo {
  ingredientId: String!
  value: Float!
}

type Recipe {
  _id: ID!
  mainEntityOfPage: String
  name: String
  image: [ImageType!]
  servingSize: Float
  servings: Float
  datePublished: String
  description: String
  prepTime: String
  cookTime: String
  totalTime: String
  recipeYield: String
  recipeIngredients: [String!]
  recipeInstructions: [String!]
  recipeCuisines: [String!]
  author: [String!]
  recipeBlendCategory: RecipeCategory
  brand: Brand
  foodCategories: [String!]
  ingredients: [IngredientData!]
  url: String
  scrappedByAdmin: Boolean
  discovery: Boolean
  favicon: String
  numberOfRating: Float
  totalRating: Float
  totalViews: Float
  averageRating: Float
  seoTitle: String
  seoSlug: String
  seoCanonicalURL: String
  seoSiteMapPriority: Float
  seoKeywords: [String!]
  seoMetaDescription: String
  notes: Float
  userId: MemberProfileForRecipe
  addedToCompare: Boolean
  userCollections: [ID!]
  collections: [ID!]
  recipeVersion: [SimpleVersion!]
  originalVersion: RecipeVersion
  defaultVersion: RecipeVersion
  isMatch: Boolean
}

type ImageType {
  image: String!
  default: Boolean!
}

type RecipeCategory {
  _id: ID!
  name: String!
  slug: String
  description: String
  image: String
  icon: String
  isPublished: Boolean
  title: String
  canonicalURL: String
  siteMap: String
  metaDesc: String
  keywords: [String!]
}

type Brand {
  _id: ID!
  brandName: String!
  slug: String
  isPublished: Boolean
  brandDescription: String
  brandImage: String
  brandIcon: String
  brandUrl: String
  title: String
  canonicalURL: String
  siteMap: String
  metaDesc: String
  keywords: [String!]
}

type IngredientData {
  ingredientId: BlendIngredientData!
  weightInGram: Float!
  selectedPortion: SelectedPortion!
  portions: [ReturnPortion!]
}

type BlendIngredientData {
  _id: ID!
  ingredientName: String
  category: String
  blendStatus: String
  classType: String
  description: String
  varrient: ID
  srcFoodReference: Ingredient
  blendNutrients: [BlendNutrient!]
  notBlendNutrients: [NutrientValue!]
  portions: [BlendPortion!]
  featuredImage: String
  sourceName: String!
  images: [String!]
  collections: [ID!]
  gi: Float
}

type BlendNutrient {
  value: String
  blendNutrientRefference: BlendNutrientData
}

type BlendPortion {
  measurement: String!
  measurement2: String
  meausermentWeight: String!
  default: Boolean
  sourceId: String
  _id: String
}

type SelectedPortion {
  name: String!
  quantity: Float!
  gram: Float!
}

type ReturnPortion {
  name: String!
  quantity: Float
  default: Boolean!
  gram: Float!
}

type MemberProfileForRecipe {
  _id: ID!
  displayName: String
  image: String
  firstName: String
  lastName: String
  email: String
}

type SimpleVersion {
  _id: String!
  postfixTitle: String
  description: String
  createdAt: DateTime
  editedAt: DateTime
  isDefault: Boolean
  isOriginal: Boolean
}

# The javascript `Date` as string. Type represents date and time as the ISO Date string.
scalar DateTime

type RecipeVersion {
  _id: ID!
  servingSize: Float
  recipeId: ID
  recipeInstructions: [String!]
  postfixTitle: String!
  description: String
  ingredients: [IngredientData!]
}

input GetAllRecipeByBlendCategory {
  userId: ID!
  blendTypes: [ID!]!
  includeIngredientIds: [ID!]
}

type SimpleRecipe {
  _id: ID!
  mainEntityOfPage: String
  name: String
  image: [ImageType!]
  servingSize: Float
  servings: Float
  datePublished: String
  description: String
  prepTime: String
  cookTime: String
  totalTime: String
  recipeYield: String
  recipeIngredients: [String!]
  recipeInstructions: [String!]
  recipeCuisines: [String!]
  author: [String!]
  recipeBlendCategory: RecipeCategory
  brand: Brand
  foodCategories: [String!]
  ingredients: [IngredientData!]
  url: String
  scrappedByAdmin: Boolean
  discovery: Boolean
  favicon: String
  numberOfRating: Float
  totalRating: Float
  totalViews: Float
  averageRating: Float
  seoTitle: String
  seoSlug: String
  seoCanonicalURL: String
  seoSiteMapPriority: Float
  seoKeywords: [String!]
  seoMetaDescription: String
  notes: Float
  addedToCompare: Boolean
  userCollections: [ID!]
  collections: [ID!]
  recipeVersion: [SimpleVersion!]
  originalVersion: ID
  defaultVersion: RecipeVersion
  isMatch: Boolean
}

input FilterRecipe {
  userId: ID!
  blendTypes: [ID!]
  includeIngredientIds: [ID!]
  excludeIngredientIds: [ID!]
  nutrientMatrix: [NutrientMatrix!]
  nutrientFilters: [NutrientFilterForRecipe!]
}

input NutrientMatrix {
  lessThan: Boolean!
  greaterThan: Boolean!
  beetween: Boolean!
  value1: Float
  value2: Float
  value: Float!
  matrixName: MatrixName!
}

# The basic directions
enum MatrixName {
  gi
  gl
  calorie
  netCarbs
}

input NutrientFilterForRecipe {
  lessThan: Boolean!
  greaterThan: Boolean!
  beetween: Boolean!
  value1: Float
  value2: Float
  value: Float!
  category: category!
  nutrientId: ID!
}

# The basic directions
enum category {
  energy
  mineral
  vitamin
}

type Admin {
  _id: ID!
  firstName: String
  lastName: String
  displayName: String
  location: String
  email: String!
  number: String
  title: String
  notes: String
  profilePicture: String
  image: String
  role: ID
  createdAt: DateTime!
}

type PopulatedAdmin {
  _id: ID!
  firstName: String
  lastName: String
  displayName: String
  location: String
  email: String!
  number: String
  title: String
  notes: String
  profilePicture: String
  image: String
  role: Role
  createdAt: DateTime!
}

type Role {
  _id: ID!
  roleName: String
  Users: RoleType
  Admin: RoleType
  Dashboard: RoleType
  Shop: RoleType
  Blend: RoleType
  Wiki: RoleType
  All: RoleType
  createdAt: DateTime
}

type RoleType {
  delete: Boolean!
  edit: Boolean!
  create: Boolean!
  view: Boolean!
}

type CollectionsAndTheme {
  collections: [SimpleCollection!]!
  themes: [String!]
}

type SimpleCollection {
  _id: ID!
  name: String
  slug: String
  recipes: [ID!]
  image: String
}

type CollectionType {
  _id: ID!
  name: String
  slug: String
  recipes: [Recipe!]
  image: String
}

type Member {
  _id: ID!
  bio: String
  yourBlender: String
  provider: String!
  displayName: String
  firstName: String
  orderHistoty: [String!]
  lastName: String
  email: String
  phone: String
  location: String
  myCart: [String!]
  recentViewedProducts: [String!]
  image: String
  createdAt: DateTime!
  configuration: Configuiration
  collections: [CollectionType!]
  lastModifiedCollection: ID!
  compareLength: Float
  compareList: [ID!]
  wikiCompareCount: Float
  isCreated: Boolean
}

type Configuiration {
  _id: ID!
  gender: String
  weightInKilograms: Float
  heightInCentimeters: Float
  pregnantOrLactating: String
  age: AgeType
  activity: String
  dieteryLifeStyle: String
  allergies: [String!]
  preExistingMedicalConditions: [String!]
  meditcation: [String!]
  whyBlending: [String!]
}

type AgeType {
  quantity: Float
  years: Boolean
  months: Boolean
}

input AddExistingRecipeInput {
  userEmail: String!
  recipeUrl: String!
}

type RecipeComments {
  comments: [Comment!]!
  recipe: Recipe
}

type Comment {
  _id: ID!
  comment: String!
  rating: Float!
  createdAt: DateTime!
  updatedAt: DateTime
  userId: Member!
}

input GetAllComments {
  userId: ID!
  recipeId: ID!
}

type AdminCollection {
  _id: ID!
  name: String!
  children: [ID!]!
  collectionType: String!
}

type SimpleAdminCollection {
  _id: ID!
  collectionType: String!
  name: String!
}

type UserNote {
  _id: ID!
  title: String!
  body: String!
  recipeId: ID!
  userId: ID!
  createdAt: DateTime!
  updatedAt: DateTime
}

input GetMyNote {
  recipeId: ID!
  userId: ID!
}

type ReturnBlendIngredientData {
  _id: ID!
  ingredientName: String
  category: String
  blendStatus: String
  classType: String
  description: String
  srcFoodReference: ID
  nutrientCount: Float
  varrient: BlendIngredientData
  notBlendNutrientCount: Float
  imageCount: Float
  portions: [BlendPortion!]
  featuredImage: String
  images: [String!]
  sourceName: String
  collections: [ID!]
  gi: Float
}

input IngredientFilter {
  ingredientCategory: String!
  IngredientClass: Float!
}

type ReturnBlendIngredientBasedOnDefaultPortion {
  _id: ID!
  ingredientId: String
  ingredientName: String
  category: String
  blendStatus: String
  classType: String
  defaultPortionNutrients: [BlendNutrient!]
  portions: [BlendPortion!]
  varrient: ID
  source: String
  description: String
  sourceId: String
  sourceCategory: String
  publication_date: String
  featuredImage: String
  images: [String!]
  collections: [ID!]
  gi: Float
}

type NutrientsWithGiGl {
  nutrients: String!
  giGl: GiGl
}

type GiGl {
  totalGi: Float!
  netCarbs: Float!
  totalGL: Float!
}

input BlendIngredientInfo {
  ingredientId: String!
  value: Float
}

type IngredientForWiki {
  ingredientId: ID!
  name: String!
  value: Float!
  units: String!
  portion: Portion!
}

input GetIngredientsFromNutrition {
  nutritionID: String!
  category: String!
}

type WikiListWithPagination {
  wikiList: [wikiList!]!
  total: Float
}

type wikiList {
  _id: ID!
  wikiTitle: String
  wikiDescription: String
  type: String
  category: String
  image: String
  status: String
  portions: [Portion!]
  publishDate: DateTime
  description: String
  publishedBy: String!
  isPublished: Boolean
  commentsCount: Float
  hasInCompare: Boolean
  collections: [ID!]
}

type NutritionFromIngredient {
  wikiTitle: String
  wikiDescription: String
  wikiCoverImages: [String!]
  wikiFeatureImage: String
  bodies: String
  type: String
  category: String
  publishedBy: String
  seoTitle: String
  seoSlug: String
  seoCanonicalURL: String
  portions: [BlendPortion!]
  seoSiteMapPriority: Float
  seoKeywords: [String!]
  seoMetaDescription: String
  isPublished: Boolean
  commentsCount: Float
  hasInCompare: Float
  ingredientBookmarkList: [Bookmark!]
}

type Bookmark {
  nutrientId: BookmarkNutrient
  ingredientId: BookmarkIngredient
  customBookmarkName: String
  link: String
  active: Boolean
}

type BookmarkNutrient {
  _id: ID!
  nutrientName: String!
}

type BookmarkIngredient {
  _id: ID!
  ingredientName: String!
  portions: [BlendPortion!]
}

type IngredientFromNutrition {
  _id: ID!
  wikiTitle: String
  wikiDescription: String
  wikiCoverImages: [String!]
  wikiFeatureImage: String
  bodies: String
  ingredients: [IngredientForWiki!]
  type: String
  category: String
  publishedBy: String
  seoTitle: String
  seoSlug: String
  seoCanonicalURL: String
  seoSiteMapPriority: Float
  seoKeywords: [String!]
  seoMetaDescription: String
  isPublished: Boolean
  commentsCount: Float
  nutrientBookmarkList: [Bookmark!]
}

input GramConversion {
  amount: Float!
  unit: String!
}

type WikiLinks {
  ingredientLinks: [IngredientWikiLink!]!
  nutrientLinks: [NutrientWikiLink!]!
  bookmarks: [Bookmark!]!
  globalBookmarks: [ExternalBookmark!]!
}

type IngredientWikiLink {
  wikiTitle: String
  _id: ID!
  ingredientName: String
  portions: [BlendPortion!]
}

type NutrientWikiLink {
  wikiTitle: String
  _id: ID!
  nutrientName: String
}

type ExternalBookmark {
  entityId: GlobalBookmarkEntity!
  link: String
  type: String
}

type GlobalBookmarkEntity {
  _id: ID!
  nutrientName: String
  ingredientName: String
}

type PopulatedDaily {
  _id: ID!
  nutrientName: String!
  units: String!
  category: ID!
  categoryName: String!
  blendNutrientRef: BlendNutrientData!
}

type DailyWithRanges {
  _id: ID!
  nutrientName: String!
  units: String!
  unitName: String!
  showPercentage: Boolean
  calorieGram: Float
  category: ID!
  categoryName: String!
  ranges: [RangeType!]!
  blendNutrientRef: ID!
}

type RangeType {
  _id: ID!
  lifeStageGroup: String!
  ageInMonth: Boolean!
  ageInRange: Boolean!
  dailyPercentage: Boolean!
  dailyPercentageInRange: Boolean!
  ageRangeFrom: Float
  ageRangeTo: Float
  ageMorethan: Float
  ageLessThan: Float
  dailyPercentageRangeFrom: Float
  dailyPercentageRangeTo: Float
  dailyPercentageValue: Float
  value: Float
  units: String
  RDA: Boolean!
  upperLimit: Float
}

type GetDaily {
  bmi: ValueUnit!
  calories: ValueUnit!
  nutrients: NutrientDaily!
}

type ValueUnit {
  value: String
  value2: String
  units: String
  upperLimit: Float
}

type NutrientDaily {
  Energy: [NutrientDailyDescription!]!
  Minerals: [NutrientDailyDescription!]!
  Vitamins: [NutrientDailyDescription!]!
}

type NutrientDailyDescription {
  nutrientName: String!
  data: ValueUnit!
  blendNutrientRef: ID
  showPercentage: Boolean
  percentage: Float
  calorieGram: Float
}

type ReturnDailyGoal {
  memberId: ID!
  goals: String
  calories: CalorieType
  bmi: Float
}

type CalorieType {
  goal: Float
  dri: Float
}

type WidgetType {
  _id: ID!
  slug: String
  widgetName: String
  bannerId: ID
  widgetType: String
  clickCount: Float
  viewCount: Float
  collectionCount: Float
  widgetCollections: [SingleWidgetCollecType!]
}

type SingleWidgetCollecType {
  _id: ID!
  displayName: String
  icon: String
  bannerId: Banner
  collectionData: AdminCollection
  publishDate: String
  slug: String
  publishedBy: ID
  showTabMenu: Boolean
  orderBy: String
  theme: Theme
  filter: FilterType
  isPublished: Boolean
}

type Banner {
  _id: ID!
  bannerName: String!
  description: String!
  link: String!
  channel: ID!
  createdAt: DateTime!
  updatedAt: DateTime
}

type Theme {
  _id: ID!
  themeName: String!
  description: String!
  link: String!
  channel: ID!
  viewPorts: [String!]!
  thumbnailImage: String!
  createdAt: DateTime!
  updatedAt: DateTime
}

type FilterType {
  filterType: String
  values: [FilterValue!]
}

type FilterValue {
  label: String
  value: ID
}

type WidgetCollecType {
  _id: ID!
  displayName: String
  icon: String
  banner: String
  bannerId: String
  collectionData: AdminCollection
  publishDate: String
  publishedBy: ID
  showTabMenu: Boolean
  slug: String
  orderBy: String
  theme: String
  filter: FilterType
  isPublished: Boolean
}

type WidgetForClient {
  _id: ID!
  slug: String!
  widgetName: String
  widgetType: String
  bannerId: Banner
  widgetCollections: [WidgetCollectionForClient!]
}

type WidgetCollectionForClient {
  _id: ID!
  displayName: String
  icon: String
  banner: String
  showTabMenu: Boolean
  data: DataType
  filter: FilterType
  slug: String
  themeLink: String
  bannerLink: String
}

type DataType {
  collectionType: String
  Recipe: [Recipe!]
  Ingredient: [BlendIngredientData!]
}

type RecipeWithVersion {
  _id: ID!
  mainEntityOfPage: String
  name: String
  image: [ImageType!]
  servingSize: Float
  servings: Float
  datePublished: String
  description: String
  prepTime: String
  cookTime: String
  totalTime: String
  recipeYield: String
  recipeIngredients: [String!]
  recipeInstructions: [String!]
  recipeCuisines: [String!]
  author: [String!]
  recipeBlendCategory: RecipeCategory
  brand: Brand
  foodCategories: [String!]
  ingredients: [IngredientData!]
  url: String
  scrappedByAdmin: Boolean
  discovery: Boolean
  favicon: String
  numberOfRating: Float
  totalRating: Float
  totalViews: Float
  averageRating: Float
  seoTitle: String
  seoSlug: String
  seoCanonicalURL: String
  seoSiteMapPriority: Float
  seoKeywords: [String!]
  seoMetaDescription: String
  notes: Float
  userId: MemberProfileForRecipe
  addedToCompare: Boolean
  userCollections: [ID!]
  collections: [ID!]
  recipeVersion: [RecipeVersion!]
  isMatch: Boolean
}

type Grocery {
  ingredientId: GroceryIngredientType
  selectedPortion: String
  quantity: Float
}

type GroceryIngredientType {
  _id: ID!
  ingredientName: String
  portions: [BlendPortion!]
  featuredImage: String
}

type PlannersIngredientAndCategory {
  planners: [PlannerWithRecipes!]!
  topIngredients: [TopIngredientData!]
  recipeCategoriesPercentage: [CategoryPercentage!]
}

type PlannerWithRecipes {
  _id: ID
  memberId: ID
  recipes: [Recipe!]!
  formatedDate: String!
  createdAt: DateTime
  updatedAt: DateTime
}

type TopIngredientData {
  _id: ID!
  name: String
  count: Float
  featuredImage: String
}

type CategoryPercentage {
  _id: ID!
  name: String
  count: Float
  percentage: Float
}

type PlannerRecipe {
  recipes: [Recipe!]
  totalRecipe: Float!
}

type inviteInfo {
  invitedBy: Member!
  challengeId: ChallengeInfo!
}

type ChallengeInfo {
  longestStreak: Float
  currentStreak: Float
  blendScore: Float
  daysRemaining: Float
  challengeName: String
  challengeId: ID
  totalChallengePosts: Float
  startDate: String
  endDate: String
  viewOnly: Boolean
  memberInfo: Member
  sharedWith: [SharedWith!]
  topIngredients: [TopIngredient!]
}

type SharedWith {
  memberId: Member!
  canInviteWithOthers: Boolean
  blendScore: Float
}

type TopIngredient {
  ingredientId: BlendIngredientData!
  count: Float!
}

type ChallengePost {
  docId: ID
  _id: ID
  recipeBlendCategory: RecipeCategory!
  images: [String!]!
  servingSize: Float
  servings: Float
  name: String
  note: String
  ingredients: [IngredientData!]
}

type ChallengeAndChallengeDocs {
  challenge: [Challenge!]
  challengeInfo: ChallengeInfo
}

type Challenge {
  _id: ID
  assignDate: DateTime!
  date: String
  dayName: String
  images: [String!]
  disabled: Boolean
  posts: [ChallengePost!]!
  formattedDate: String
}

type GalleryImage {
  assignDate: DateTime!
  images: [String!]!
}

type ChallengePostWithCount {
  challenge: [Challenge!]!
  totalPost: Float!
}

type IngredientStatsWithPortion {
  stats: [IngredientStats!]!
  portion: BlendPortion!
  category: String!
  otherIngredients: [OtherIngredientStats!]!
}

type IngredientStats {
  _id: DateTime!
  endDate: DateTime
  consumptionInGram: Float!
}

type OtherIngredientStats {
  _id: ID!
  name: String!
  portion: BlendPortion!
  consumptionInGram: Float!
}

type BlendNutrientStats {
  ingredientStats: [IngredientStatsForNutrient!]!
  dateStats: [DateStat!]!
  dailyAverage: Float!
  dailyRecomended: Float!
  attainment: Float!
  upperLimit: Float!
  units: String
}

type IngredientStatsForNutrient {
  _id: ID!
  ingredientName: String!
  totalAmount: Float!
  units: String!
  defaultPortion: BlendPortion!
}

type DateStat {
  assignDate: DateTime!
  totalAmount: Float!
}

type UserChallenge {
  _id: ID!
  challengeName: String!
  memberId: String!
  description: String!
  notification: Boolean!
  startDateString: String!
  startingDate: String
  endDateString: String!
  days: Float!
  isActive: Boolean
  hasCreatedByMe: Boolean!
}

type ChallengeInfoForId {
  challengeName: String
  memberInfo: Member
}

type PopulatedWikiComment {
  _id: ID!
  comment: String!
  type: String!
  entityId: ID!
  userId: Member!
  createdAt: DateTime!
  updatedAt: DateTime
}

type CompareBlendIngredientData {
  _id: ID!
  category: String
  portions: [BlendPortion!]
  featuredImage: String
  wikiTitle: String
  wikiDescription: String
  type: String
  image: String
  status: String
  publishDate: DateTime
  publishedBy: String!
  isPublished: Boolean
  commentsCount: Float
  hasInCompare: Boolean
}

type ThemeChannel {
  _id: ID!
  name: String!
}

type GeneralBlog {
  _id: ID!
  title: String!
  slug: String!
  type: String!
  body: String!
  keywords: [String!]!
  createdBy: ID
  createdAt: DateTime!
  updatedAt: DateTime
  category: String
  description: String
  coverImage: String
  mediaUrl: String
  mediaLength: Float
  publishDateString: String
  publishDate: DateTime
  commentsCount: Float
  hasInCollection: Boolean
}

type BlogComment {
  _id: ID!
  comment: String!
  blogId: ID!
  memberId: Member!
  createdAt: DateTime!
  updatedAt: DateTime
}

type Plan {
  _id: ID
  planName: String!
  description: String!
  startDateString: String
  endDateString: String
  memberId: ID!
  planData: [PlanData!]!
  createdAt: String
  updatedAt: String
  isGlobal: Boolean
  collections: [ID!]
  commentsCount: Float
  planCollection: PlanCollection
}

type PlanData {
  _id: ID!
  recipes: [Recipe!]
  day: Float
}

type PlanCollection {
  name: String!
  slug: String!
  image: String!
  memberId: ID!
  plans: [ID!]!
  createdAt: DateTime!
  collectionDataCount: Float!
  updatedAt: DateTime
}

type PlanIngredientAndCategory {
  plan: Plan!
  topIngredients: [TopIngredientData!]
  recipeCategoriesPercentage: [CategoryPercentage!]
}

type PlansWithTotal {
  plans: [Plan!]!
  totalPlans: Float
}

type BlogCollection {
  _id: ID!
  name: String!
  slug: String!
  image: String
  memberId: ID!
  blogs: [ID!]!
  createdAt: DateTime!
  collectionDataCount: Float!
  updatedAt: DateTime
}

type PlanComment {
  _id: ID!
  comment: String!
  planId: ID!
  memberId: Member!
  createdAt: DateTime!
  updatedAt: DateTime
}

type Mutation {
  createNewIngredient(data: CreateIngredient!): Ingredient!
  editUniqueNutrient(data: EditNutrient!): String!
  EditSrcIngredient(data: EditIngredient!): String!
  removeIngredient(ingredientId: String!): String!
  updateSrcIngredient(page: Float!): String!
  updateNotBlendIngredientData: String!
  editARecipe(data: EditRecipe!): String!
  deleteARecipe(userId: String!, recipeId: String!): String!
  addRecipeFromAdmin(data: CreateRecipe!): String!
  addRecipeFromUser(data: CreateRecipe!): Recipe!
  addScrappedRecipeFromUser(data: CreateScrappedRecipe!): String!
  addBulkScrappedRecipeFromUser(data: [CreateScrappedRecipe!]!): String!
  getA: String!
  addMacroInfo: [Hello!]!
  removeAllVersionFacts: String!
  makeSomeGlobalRecipes: Boolean!
  orderingRecipeCategory(data: [String!]!): String!
  createRecipeCategory(data: CreateRecipeCategory!): String!
  deleteRecipeCategory(recipeCategoryId: String!): String!
  updateRecipeCategory(data: EditRecipeCategory!): String!
  setOrder: String!
  createBrand(data: CreateRecipeBrand!): String!
  editARecipeBrand(data: EditRecipeBrand!): String!
  deleteARecipeBrand(brandId: String!): String!
  orderingRecipeBrand(data: [String!]!): String!
  setOrderBrand: String!
  createNewAdmin(data: NewAdminInput!): Admin!
  removeAdmin(email: String!): String!
  editAdmin(data: EditAdmin!): String!
  createNewRole(data: CreateRole!): Role!
  removeRole(roleId: String!): String!
  editRole(data: EditRole!): String!
  createNewUser(data: NewUserInput!): Member!
  createNewCollection(data: CreateNewCollection!): CollectionType!
  removeAUserById(userId: String!): String!
  removeAUserByemail(email: String!): String!
  editUserByEmail(data: EditUser!): String!
  editUserById(data: EditUser!): String!
  changeCompare(userId: String!, recipeId: String!): Float!
  emptyCompareList(userId: String!): String!
  yyyy: Float!
  removeAconfiguirationById(configuirationId: String!): String!
  editConfifuirationById(data: EditConfiguiration!): String!
  createNewUserRecipeWithCollection(data: NewUserRecipeInput!): String!
  addTolastModifiedCollection(
    data: AddToLastModifiedCollectionInput!
  ): [CollectionType!]!
  addRecipeToAUserCollection(
    data: AddCRecipeTOAUserCollectionInput!
  ): [CollectionType!]!
  removeRecipeFromAColection(
    data: AddCRecipeTOAUserCollectionInput!
  ): [CollectionType!]!
  deleteCollection(data: RemoveACollectionInput!): [CollectionType!]!
  editACollection(data: EditCollection!): String!
  changeCollection: String!
  addOrRemoveRecipeFromCollection(
    data: AddOrRemoveRecipeFromCollectionInput!
  ): [CollectionType!]!
  createComment(data: CreateComment!): RecipeComments!
  removeComment(data: RemoveCommentInput!): RecipeComments!
  editComment(data: EditComment!): RecipeComments!
  addNewAdminCollection(data: CreateAdminCollection!): String!
  editAdminCollectionByID(data: EditAdminCollection!): String!
  editChildrenInCollection(data: editChildrenInCollection!): String!
  removeAdminCollection(collectionId: String!): String!
  createNewNote(data: CreateNewNote!): [UserNote!]!
  editMyNote(data: EditUserNote!): [UserNote!]!
  removeMyNote(data: RemoveNote!): [UserNote!]!
  addNewBlendNutrientCategory(data: CreateNewBlendNutrientCategrory!): String!
  deleteBlendNutrientCategory(id: String!): String!
  updateBlendNutrientCategory(data: EditBlendNutrientCategory!): String!
  addNewBlendNutrient(data: AddNewBlendNutrient!): String!
  editBlendNutrient(data: EditBlendNutriet!): String!
  addNewBlendNutrientFromSrc(data: AddNewBlendNutrientFromSrc!): String!
  removeBlendNutrient(id: String!): String!
  showChildren: String!
  EditIngredient(data: EditIngredient!): String!
  removeBlendIngredientFromSrc(id: String!): String!
  removeABlendIngredient(id: String!): String!
  addNewBlendIngredient(data: AddNewBlendIngredient!): String!
  addNewBlendIngredientFromSrc(srcId: String!): ReturnBlendIngredientData!
  changeBlendNutrients: String!
  changeBlendNutrients23: String!
  changeWaterValue: String!
  changeGIandGetGL(GI: Float!, ingredientId: String!): String!
  addGiToTheIngredients: String!
  editIngredientWiki(data: EditIngredientAndNutrientInWiki!): String!
  editIngredientWiki2(data: EditIngredientAndNutrientInWiki!): String!
  editNutrientWiki(data: EditIngredientAndNutrientInWiki!): String!
  editNutrientWiki2(data: EditIngredientAndNutrientInWiki!): String!
  makeWikis: String!
  manipulateBookMarks(
    removeCustomBookmark: Boolean
    customBookmarkName: String
    type: String!
    link: String!
    bookmarkId: String
    wikiId: String!
  ): BookmarkAndExternalGlobalLInk!
  useABookmark(use: Boolean!, bookmarkId: String!): String!
  createBookMark: String!
  createBookMark2: String!
  createNewDaily(data: CreateNewDaily!): String!
  EditADaily(data: EditDaily!): String!
  addRangeToDaily(range: Range!, dailyId: String!): String!
  editARange(data: EditRange!, dailyId: String!): String!
  removeADaily(dailyId: String!): String!
  removeARangeFromDaily(rangeId: String!, dailyId: String!): String!
  updateDailyGoals(data: CreateEditDailyGoal!): String!
  addNewWidget(data: AddWidgetInput!): String!
  addNewWidgetCollection(
    widgetCollection: WidgetCollection!
    widgetId: String!
  ): String!
  removeAWidgetCollection(
    widgetCollectionId: String!
    widgetId: String!
  ): String!
  editAWidgetCollection(
    widgetCollection: CreateEditWidgetCollection!
    widgetId: String!
  ): String!
  removeAWidget(widgetId: String!): String!
  editAWidget(data: EditWidget!): String!
  createNewTheme(data: ThemeInput!): String!
  editATheme(data: EditTheme!): String!
  removeATheme(themeId: String!): String!
  removeAllThemes: String!
  editAVersionOfRecipe(data: EditRecipeVersion!): String!
  addVersion(data: AddVersion!): [SimpleVersion!]!
  removeARecipeVersion(versionId: String!): [SimpleVersion!]!
  changeDefaultVersion(recipeId: String!, versionID: String!): [SimpleVersion!]!
  removeAllVersion: String!
  addGroceryList(data: CreateNewGroceries!): String!
  deleteSomeFromList(
    memberId: String!
    stapleIngredients: [ID!]!
    pantryIngredients: [ID!]!
    groceryIngredients: [ID!]!
  ): String!
  editAListItem(
    listType: String!
    memberId: String!
    ingredient: CreateGroceryIngreidnets!
  ): String!
  addPantryList(data: CreateNewPantry!): String!
  createPlanner(data: CreatePlanner!): Planner!
  movePlanner(data: MovePlanner!): Planner!
  deletePlanner(recipeId: String!, plannerId: String!): String!
  clearPlannerByDates(
    userId: String!
    endDate: String!
    startDate: String!
  ): String!
  addToGroceryFromPlanner(recipeId: String!, memberId: String!): String!
  mergeOrReplacePlanner(
    mergeOrReplace: mergerOrRemove!
    planId: String!
    memberId: String!
    endDate: String
    startDate: String!
  ): String!
  createChallengePost(data: CreateChallengePost!): String!
  inviteToChallenge(
    canInviteWithOthers: Boolean!
    invitedWith: [String!]!
    invitedBy: String!
    challengeId: String!
  ): String!
  acceptChallenge(memberId: String!, inviteId: String!): String!
  editAChallengePost(data: EditChallengePost!): String!
  deleteAChallengePost(postId: String!, docId: String!): String!
  copyAChallengePost(
    memberId: String!
    assignDate: String!
    postId: String!
    docId: String!
  ): String!
  moveAChallengePost(
    memberId: String!
    assignDate: String!
    postId: String!
    docId: String!
  ): String!
  createUserChallenge(data: CreateUserChallenge!): String!
  activateChallenge(
    previousDefaultChallengeId: String!
    challengeId: String!
    memberId: String!
  ): String!
  editUserChallenge(data: CreateEditUserChallenge!): String!
  deleteUserChallenge(challengeId: String!): String!
  shareGlobalChallenge(memberId: String!, challengeId: String!): String!
  createWikiComment(data: CreateWikiComment!): PopulatedWikiComment!
  editWikiComment(data: EditWikiComment!): PopulatedWikiComment!
  removeAWikiComment(userId: String!, commentId: String!): String!
  addOrRemoveToWikiCompareList(ingredientId: String!, userId: String!): String!
  removeFromWikiCompareList(ingredientId: String!, userId: String!): String!
  changeWikiCompareList(ingredients: [String!]!, userId: String!): String!
  emptyWikiCompareList(userId: String!): String!
  addThemeChannel(description: String!, name: String!): String!
  createNewBanner(data: BannerInput!): String!
  editABanner(data: EditBanner!): String!
  removeABanner(bannerId: String!): String!
  removeAllBanners: String!
  createShareLink(data: CreateNewShareLink!): String!
  addGeneralBlog(data: CreateNewGeneralBlog!): String!
  editAGeneralBlog(data: EditGeneralBlog!): String!
  deleteAGeneralBlog(blogId: ID!): String!
  createBlogComment(data: CreateNewBlogComment!): BlogComment!
  editBlogComment(data: EditBlogComment!): BlogComment!
  removeABlogComment(memberId: String!, commentId: String!): String!
  createAPlan(input: CreateNewPlan!): String!
  updateAPlan(input: EditPlan!): String!
  deletePlan(memberId: String!, planId: String!): String!
  addOrRemoveToBlogCollection(
    previousBlogCollection: String
    blogId: String!
    memberId: String!
    collectionId: String
  ): String!
  addNewBlogCollection(data: CreateNewBlogCollection!): BlogCollection!
  deleteBlogCollection(memberId: String!, collectionId: String!): String!
  createPlanComment(data: CreateNewPlanComment!): PlanComment!
  editPlanComment(data: EditPlanComment!): PlanComment!
  removeAPlanComment(memberId: String!, commentId: String!): String!
}

input CreateIngredient {
  ingredientId: String
  ingredientName: String
  category: String
  blendStatus: String
  classType: String
  nutrients: [CreateNutrientValue!]
  portions: [CreatePortion!]
  source: String
  description: String
  sourceId: String
  sourceCategory: String
  publication_date: String
  featuredImage: String
  images: [String!]
  collections: [ID!]
}

input CreateNutrientValue {
  value: String!
  nutrient: String
  category: String
  sourceId: String!
  uniqueNutrientRefference: ID!
}

input CreatePortion {
  measurement: String!
  measurement2: String
  meausermentWeight: String!
  default: Boolean!
  sourceId: String
  _id: String
}

input EditNutrient {
  editId: String!
  editableObject: CreateUniqueNutrient!
}

input CreateUniqueNutrient {
  nutrient: String
  category: String
  nutrientId: String
  unitName: String
  min: String
  max: String
  units: String
  rank: Float
  publication_date: String
  parentNutrient: ID
  related_sources: [CreateRelatedSource!]
}

input CreateRelatedSource {
  source: String!
  sourceId: String!
  sourceNutrientName: String!
  units: String!
}

input EditIngredient {
  editId: String!
  editableObject: CreateEditBlendIngredient!
}

input CreateEditBlendIngredient {
  ingredientName: String
  category: String
  blendStatus: String
  classType: String
  description: String
  varrient: ID
  blendNutrients: [ID!]
  portions: [BlendPortionInput!]
  defaultPortion: ID
  featuredImage: String
  images: [String!]
  collections: [ID!]
  gi: Float
}

input BlendPortionInput {
  measurement: String!
  measurement2: String
  meausermentWeight: String!
  default: Boolean!
  sourceId: String
  _id: String
}

input EditRecipe {
  editId: String!
  editableObject: CreateEditRecipe!
}

input CreateEditRecipe {
  mainEntityOfPage: String
  postfixTitle: String
  servingSize: Float
  servings: Float
  name: String
  image: [Image!]
  datePublished: String
  description: String
  prepTime: String
  cookTime: String
  totalTime: String
  recipeYield: String
  recipeIngredients: [String!]
  recipeInstructions: [String!]
  recipeCuisines: [String!]
  author: [String!]
  recipeBlendCategory: String
  brandName: String
  foodCategories: [String!]
  ingredients: [CreateIngredientData!]
  url: String
  favicon: String
  seoTitle: String
  seoSlug: String
  seoCanonicalURL: String
  seoSiteMapPriority: Float
  seoKeywords: [String!]
  seoMetaDescription: String
}

input Image {
  image: String!
  default: Boolean!
}

input CreateIngredientData {
  ingredientId: ID!
  selectedPortionName: String
  weightInGram: Float
}

input CreateRecipe {
  mainEntityOfPage: String
  name: String!
  image: [Image!]
  servingSize: Float
  servings: Float
  datePublished: String
  description: String
  prepTime: String
  cookTime: String
  totalTime: String
  recipeYield: String
  recipeIngredients: [String!]
  recipeInstructions: [String!]
  recipeCuisines: [String!]
  author: [String!]
  recipeBlendCategory: String
  brandName: String
  foodCategories: [String!]
  ingredients: [CreateIngredientData!]
  url: String
  favicon: String
  userId: ID
  adminId: ID
  seoTitle: String
  seoSlug: String
  seoCanonicalURL: String
  seoSiteMapPriority: Float
  seoKeywords: [String!]
  seoMetaDescription: String
}

input CreateScrappedRecipe {
  mainEntityOfPage: String
  name: String!
  image: [Image!]
  servingSize: Float
  servings: Float
  datePublished: String
  description: String
  prepTime: String
  cookTime: String
  totalTime: String
  recipeYield: String
  recipeIngredients: [String!]
  recipeInstructions: [String!]
  recipeCuisines: [String!]
  author: [String!]
  recipeBlendCategory: String
  brandName: String
  foodCategories: [String!]
  ingredients: [CreateIngredientData!]
  url: String
  favicon: String
  userId: String
  adminId: ID
  seoTitle: String
  seoSlug: String
  seoCanonicalURL: String
  seoSiteMapPriority: Float
  seoKeywords: [String!]
  seoMetaDescription: String
}

type Hello {
  recipes: [ID!]
  userId: ID
  count: Float
}

input CreateRecipeCategory {
  name: String!
  slug: String!
  description: String
  image: String
  icon: String
  isPublished: Boolean
  title: String
  canonicalURL: String
  siteMap: String
  metaDesc: String
  keywords: [String!]
}

input EditRecipeCategory {
  editId: String!
  editableObject: CreateEditRecipeCategory!
}

input CreateEditRecipeCategory {
  name: String
  slug: String
  description: String
  image: String
  icon: String
  isPublished: Boolean
  title: String
  canonicalURL: String
  siteMap: String
  metaDesc: String
  keywords: [String!]
}

input CreateRecipeBrand {
  brandName: String!
  slug: String
  isPublished: Boolean
  brandDescription: String
  brandImage: String
  brandIcon: String
  brandUrl: String
  title: String
  canonicalURL: String
  siteMap: String
  metaDesc: String
  keywords: [String!]
}

input EditRecipeBrand {
  editId: String!
  editableObject: CreateEditRecipeBrand!
}

input CreateEditRecipeBrand {
  brandName: String
  slug: String
  isPublished: Boolean
  brandDescription: String
  brandImage: String
  brandIcon: String
  brandUrl: String
  title: String
  canonicalURL: String
  siteMap: String
  metaDesc: String
  keywords: [String!]
}

input NewAdminInput {
  firstName: String
  lastName: String
  displayName: String
  location: String
  email: String!
  number: String
  title: String
  notes: String
  profilePicture: String
  image: String
  role: ID
}

input EditAdmin {
  editId: String!
  editableObject: CreateEditAdmin!
}

input CreateEditAdmin {
  firstName: String
  lastName: String
  displayName: String
  location: String
  email: String
  number: String
  title: String
  notes: String
  profilePicture: String
  image: String
  role: ID
}

input CreateRole {
  roleName: String!
  Users: RoleTypeInput!
  Admin: RoleTypeInput!
  Dashboard: RoleTypeInput!
  Shop: RoleTypeInput!
  Blend: RoleTypeInput!
  Wiki: RoleTypeInput!
  All: RoleTypeInput!
}

input RoleTypeInput {
  delete: Boolean!
  edit: Boolean!
  create: Boolean!
  view: Boolean!
}

input EditRole {
  editId: String!
  editableObject: CreateEditRole!
}

input CreateEditRole {
  roleName: String!
  Users: RoleTypeInput!
  Admin: RoleTypeInput!
  Dashboard: RoleTypeInput!
  Shop: RoleTypeInput!
  Blend: RoleTypeInput!
  Wiki: RoleTypeInput!
  All: RoleTypeInput!
}

input NewUserInput {
  email: String!
  provider: String
}

input CreateNewCollection {
  userEmail: String!
  collection: CollectionInput!
}

input CollectionInput {
  name: String
  recipes: [NewUserRecipeInput!]
  image: String
}

input NewUserRecipeInput {
  userEmail: String!
  collectionId: ID
  recipe: CreateRecipe!
}

input EditUser {
  editId: String!
  editableObject: CreateEditUser!
}

input CreateEditUser {
  bio: String
  yourBlender: String
  provider: String
  displayName: String
  firstName: String
  orderHistoty: [String!]
  lastName: String
  email: String
  location: String
  myCart: [String!]
  recentViewedProducts: [String!]
  image: String
  createdAt: DateTime
}

input EditConfiguiration {
  editId: String!
  editableObject: CreateEditConfiguration!
}

input CreateEditConfiguration {
  gender: String
  weightInKilograms: Float
  heightInCentimeters: Float
  pregnantOrLactating: String
  age: Age
  activity: String
  dieteryLifeStyle: String
  allergies: [String!]
  preExistingMedicalConditions: [String!]
  meditcation: [String!]
  whyBlending: [String!]
}

input Age {
  quantity: Float
  years: Boolean
  months: Boolean
}

input AddToLastModifiedCollectionInput {
  userEmail: String!
  recipe: ID!
}

input AddCRecipeTOAUserCollectionInput {
  userEmail: String!
  collectionId: ID
  recipe: ID!
}

input RemoveACollectionInput {
  userEmail: String!
  collectionId: ID
}

input EditCollection {
  userEmail: String!
  collectionId: String!
  newName: String!
}

input AddOrRemoveRecipeFromCollectionInput {
  userEmail: String!
  addToTheseCollections: [ID!]
  recipe: ID!
}

input CreateComment {
  comment: String!
  rating: Float!
  recipeId: String!
  userId: ID!
}

input RemoveCommentInput {
  userId: ID!
  commentId: ID!
  recipeId: ID!
}

input EditComment {
  editId: ID!
  recipeId: ID
  userId: ID
  editableObject: CreateEditComment!
}

input CreateEditComment {
  comment: String
  rating: Float
}

input CreateAdminCollection {
  name: String!
  children: [ID!]!
  collectionType: String!
}

input EditAdminCollection {
  editId: String!
  editableObject: CreateEditAdminCollection!
}

input CreateEditAdminCollection {
  name: String!
}

input editChildrenInCollection {
  adminCollectionId: ID!
  children: [ID!]!
  checked: Boolean!
}

input CreateNewNote {
  title: String!
  body: String!
  recipeId: ID!
  userId: ID!
}

input EditUserNote {
  noteId: ID!
  userId: ID!
  recipeId: ID!
  editableObject: CreateEditUserNote!
}

input CreateEditUserNote {
  title: String
  body: String
}

input RemoveNote {
  noteId: ID!
  recipeId: ID!
  userId: ID!
}

input CreateNewBlendNutrientCategrory {
  blendId: String!
  categoryName: String!
  slug: String
  nutrientDescription: String
  images: [String!]
  featuredImage: String
  keywords: [String!]
  isPublished: Boolean
  rank: Float!
}

input EditBlendNutrientCategory {
  editId: String!
  editableObject: CreateEditBlendNutrientCategrory!
}

input CreateEditBlendNutrientCategrory {
  blendId: String
  categoryName: String
  slug: String
  nutrientDescription: String
  images: [String!]
  featuredImage: String
  keywords: [String!]
  isPublished: Boolean
  rank: Float
}

input AddNewBlendNutrient {
  blendId: String
  nutrientName: String!
  altName: String
  category: ID!
  status: String
  parent: ID
  parentIsCategory: Boolean
  rank: Float
  min_measure: String
  unitName: String
  showChildren: Boolean
  units: String
  isBookmarked: Boolean
}

input EditBlendNutriet {
  editId: String!
  editableObject: CreateEditBlendNutrient!
}

input CreateEditBlendNutrient {
  blendId: String
  nutrientName: String
  altName: String
  category: ID
  status: String
  parent: ID
  showChildren: Boolean
  parentIsCategory: Boolean
  rank: Float
  min_measure: String
  unitName: String
  units: String
  mapList: [CreateEditMap!]
  usePriorityForMap: Boolean
  isBookmarked: Boolean
}

input CreateEditMap {
  srcUniqueNutrientId: ID!
  nutrientName: String!
  rank: Float!
}

input AddNewBlendNutrientFromSrc {
  srcNutrientId: ID!
  blendNutrientIdForMaping: ID
}

input AddNewBlendIngredient {
  ingredientName: String
  category: String
  blendStatus: String
  classType: String
  description: String
  varrient: ID
  blendNutrients: [AddNewBlendNutrientToBlendIngredient!]
  portions: [CreatePortion!]
  featuredImage: String
  images: [String!]
  collections: [ID!]
  gi: Float
}

input AddNewBlendNutrientToBlendIngredient {
  value: String!
  blendNutrientRefference: ID!
}

input EditIngredientAndNutrientInWiki {
  editId: String!
  editableObject: CreateEditIngreidntAndNutrientWiki!
}

input CreateEditIngreidntAndNutrientWiki {
  wikiTitle: String
  wikiDescription: String
  wikiCoverImages: [String!]
  wikiFeatureImage: String
  bodies: String
  isPublished: Boolean
  seoTitle: String
  seoSlug: String
  seoCanonicalURL: String
  seoSiteMapPriority: Float
  seoKeywords: [String!]
  seoMetaDescription: String
}

type BookmarkAndExternalGlobalLInk {
  bookmarks: [Bookmark!]!
  globalBookmarks: [ExternalBookmark!]!
}

input CreateNewDaily {
  nutrientName: String!
  units: String
  showPercentage: Boolean
  percentage: Float
  calorieGram: Float
  unitName: String!
  category: ID!
  blendNutrientRef: ID!
}

input EditDaily {
  editId: String!
  editableObject: CreateEditDaily!
}

input CreateEditDaily {
  nutrientName: String
  units: String
  showPercentage: Boolean
  percentage: Float
  calorieGram: Float
  unitName: String
  category: String
  blendNutrientRef: ID
}

input Range {
  lifeStageGroup: String!
  ageInMonth: Boolean!
  ageInRange: Boolean!
  dailyPercentage: Boolean!
  dailyPercentageInRange: Boolean!
  ageRangeFrom: Float
  ageRangeTo: Float
  ageMorethan: Float
  ageLessThan: Float
  dailyPercentageRangeFrom: Float
  dailyPercentageRangeTo: Float
  dailyPercentageValue: Float
  value: Float
  RDA: Boolean!
  upperLimit: Float
}

input EditRange {
  _id: String!
  lifeStageGroup: String!
  ageInMonth: Boolean!
  ageInRange: Boolean!
  dailyPercentage: Boolean!
  dailyPercentageInRange: Boolean!
  ageRangeFrom: Float
  ageRangeTo: Float
  ageMorethan: Float
  ageLessThan: Float
  dailyPercentageRangeFrom: Float
  dailyPercentageRangeTo: Float
  dailyPercentageValue: Float
  value: Float
  units: String
  RDA: Boolean!
  upperLimit: Float
}

input CreateEditDailyGoal {
  memberId: ID!
  goals: [GoalInput!]!
  calories: CalorieInput
  bmi: Float
}

input GoalInput {
  blendNutrientId: ID!
  goal: Float
  dri: Float!
  percentage: Float
  showPercentage: Boolean!
}

input CalorieInput {
  goal: Float
  dri: Float!
}

input AddWidgetInput {
  widgetName: String!
  slug: String!
  widgetType: String!
  widgetCollections: [WidgetCollection!]
  bannerId: ID
}

input WidgetCollection {
  displayName: String!
  icon: String
  banner: String
  bannerId: ID
  slug: String!
  collectionData: ID!
  publishDate: String
  showTabMenu: Boolean
  publishedBy: ID
  orderBy: String
  theme: String
  filter: AddFilterInput
  isPublished: Boolean
}

input AddFilterInput {
  filterType: String!
  values: [FilterValueInput!]!
}

input FilterValueInput {
  label: String
  value: ID
}

input CreateEditWidgetCollection {
  _id: ID!
  displayName: String
  icon: String
  banner: String
  bannerId: ID
  slug: String
  collectionData: ID
  publishDate: String
  publishedBy: ID
  showTabMenu: Boolean
  orderBy: String
  theme: String
  filter: AddFilterInput
  isPublished: Boolean
}

input EditWidget {
  editId: String!
  editableObject: CreateEditWidgetInput!
}

input CreateEditWidgetInput {
  widgetName: String
  slug: String
  widgetType: String
  bannerId: ID
}

input ThemeInput {
  themeName: String!
  description: String!
  link: String!
  channel: ID!
  viewPorts: [String!]!
  thumbnailImage: String!
}

input EditTheme {
  editId: String!
  editableObject: CreateEditTheme!
}

input CreateEditTheme {
  themeName: String
  description: String
  link: String
  viewPorts: [String!]
  channel: ID
  thumbnailImage: String
}

input EditRecipeVersion {
  editId: String!
  editableObject: CreateEditRecipeVersion!
}

input CreateEditRecipeVersion {
  recipeInstructions: [String!]
  servingSize: Float
  postfixTitle: String
  description: String
  ingredients: [CreateIngredientData!]
}

input AddVersion {
  recipeId: ID!
  postfixTitle: String!
  description: String
}

input CreateNewGroceries {
  memberId: ID!
  ingredients: [CreateGroceryIngreidnets!]
}

input CreateGroceryIngreidnets {
  ingredientId: ID!
  selectedPortion: String
  quantity: Float
}

input CreateNewPantry {
  memberId: ID!
  isStaple: Boolean = false
  ingredients: [CreateGroceryIngreidnets!]
}

type Planner {
  _id: ID!
  memberId: ID!
  recipes: [ID!]!
  formatedDate: String
  createdAt: DateTime!
  updatedAt: DateTime
}

input CreatePlanner {
  memberId: ID!
  recipe: ID!
  assignDate: String!
}

input MovePlanner {
  plannerId: ID!
  assignDate: String!
  recipeId: ID!
}

# The basic directions
enum mergerOrRemove {
  MERGE
  REMOVE
}

input CreateChallengePost {
  memberId: ID!
  assignDate: String!
  post: CreateChallengePostInput!
}

input CreateChallengePostInput {
  recipeImage: String
  images: [String!]!
  recipeBlendCategory: ID!
  servingSize: Float
  servings: Float
  name: String!
  note: String
  ingredients: [CreateIngredientData!]
}

input EditChallengePost {
  memberId: ID!
  assignDate: String!
  post: CreateEditChallengePost!
}

input CreateEditChallengePost {
  _id: ID!
  docId: ID!
  recipeImage: String
  images: [String!]!
  recipeBlendCategory: ID!
  servingSize: Float
  servings: Float
  name: String!
  note: String
  ingredients: [CreateIngredientData!]
}

input CreateUserChallenge {
  challengeName: String!
  memberId: ID!
  description: String
  notification: Boolean
  startDate: DateTime!
  endDate: DateTime!
  days: Float!
}

input CreateEditUserChallenge {
  challengeId: ID!
  challengeName: String
  memberId: ID!
  description: String
  notification: Boolean
  startDate: DateTime
  endDate: DateTime
  days: Float
  isActive: Boolean
}

input CreateWikiComment {
  comment: String!
  type: String!
  entityId: ID!
  userId: ID!
}

input EditWikiComment {
  editId: ID!
  userId: ID!
  editableObject: CreateEditWikiComment!
}

input CreateEditWikiComment {
  comment: String!
}

input BannerInput {
  bannerName: String!
  description: String!
  link: String!
  channel: ID!
}

input EditBanner {
  editId: String!
  editableObject: CreateEditBanner!
}

input CreateEditBanner {
  bannerName: String
  description: String
  link: String
  channel: ID
}

input CreateNewShareLink {
  sharedBy: String!
  shareTo: [String!]!
  shareData: [String!]
  type: shareType!
  collectionId: String
  all: Boolean
}

# The basic directions
enum shareType {
  collection
  recipe
}

input CreateNewGeneralBlog {
  title: String!
  slug: String!
  body: String!
  keywords: [String!]
  type: String
  createdBy: ID
  category: String
  description: String
  coverImage: String
  mediaUrl: String
  mediaLength: Float
  isPublished: Boolean!
  publishDateString: String
}

input EditGeneralBlog {
  editId: String!
  editableObject: CreateEditGeneralBlog!
}

input CreateEditGeneralBlog {
  title: String
  slug: String
  body: String
  keywords: [String!]
  createdBy: ID
  category: String
  description: String
  coverImage: String
  mediaUrl: String
  mediaLength: Float
  isPublished: Boolean
  publishDateString: String
}

input CreateNewBlogComment {
  comment: String!
  blogId: ID!
  memberId: ID!
}

input EditBlogComment {
  editId: String!
  memberId: ID!
  editableObject: CreateEditNewBlogComment!
}

input CreateEditNewBlogComment {
  comment: String!
}

input CreateNewPlan {
  planName: String!
  description: String!
  startDateString: String
  endDateString: String
  memberId: ID!
  planData: [CreatePlanData!]!
}

input CreatePlanData {
  recipes: [ID!]!
  day: Float!
}

input EditPlan {
  editId: String!
  memberId: String!
  editableObject: CreateEditPlan!
}

input CreateEditPlan {
  planName: String
  description: String
  startDateString: String
  endDateString: String
  planData: [CreatePlanData!]
}

input CreateNewBlogCollection {
  name: String!
  slug: String!
  memberId: ID!
}

input CreateNewPlanComment {
  comment: String!
  planId: ID!
  memberId: ID!
}

input EditPlanComment {
  editId: String!
  memberId: ID!
  editableObject: CreateEditPlanComment!
}

input CreateEditPlanComment {
  comment: String!
}
